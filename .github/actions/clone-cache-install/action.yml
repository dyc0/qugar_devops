name: "Clone, build, cache and install dependencies"
description: "A GitHub Action to clone, build, cache and install specified dependency."
inputs:
  dependency_name:
    description: "Name of the dependency to install"
    required: true
  dependency_repo:
    description: "Git repository URL of the dependency"
    required: true
  cmake_options:
    description: "Additional CMake options for building the dependency"
    required: false

runs:
  using: "composite"
  steps:
    - name: Prepare workspace
      shell: bash
      run: mkdir -p ${{ github.workspace }}/.deps

    - name: Set up variables
      id: vars
      shell: bash
      run: |
        prefix="${{ github.workspace }}/.deps/${{ inputs.dependency_name }}-${{ runner.os }}-${{ runner.arch }}"
        clone="${{ runner.temp }}/${{ inputs.dependency_name }}"
        build="$clone/build"
        {
          echo "prefix=$prefix"
          echo "clone=$clone"
          echo "build=$build"
        } >> "$GITHUB_OUTPUT"

    - name: Check cache for installed dependency
      id: cache-deps
      uses: actions/cache@v4
      with: 
        path: ${{ steps.vars.outputs.prefix }}
        key: cached-${{ inputs.dependency_name }}-${{ runner.os }}-${{ runner.arch }}

    - name: If no installed dependency in cache, clone, build and install it
      # NOTE: These steps can be separated and cached individually if needed
      if: steps.cache-deps.outputs.cache-hit != 'true'
      shell: bash
      run: |
        git clone --depth 1 "${{ inputs.dependency_repo }}" "${{ steps.vars.outputs.clone }}"
        cmake -B "${{ steps.vars.outputs.build }}" \
              -S "${{ steps.vars.outputs.clone }}" \
              -DCMAKE_INSTALL_PREFIX="${{ steps.vars.outputs.prefix }}" \
              ${{ inputs.cmake_options }}
        cmake --build "${{ steps.vars.outputs.build }}" --parallel
        cmake --install "${{ steps.vars.outputs.build }}"

    - name: Expose installed prefix to the job
      # This is Chad's work
      shell: bash
      run: |
        set -e
        PREFIX="${{ steps.vars.outputs.prefix }}"

        # Binaries (and DLLs on Windows) on PATH
        echo "$PREFIX/bin" >> "$GITHUB_PATH"

        # CMake discovery (semicolon list is portable)
        echo "CMAKE_PREFIX_PATH=$PREFIX${CMAKE_PREFIX_PATH:+;${CMAKE_PREFIX_PATH}}" >> "$GITHUB_ENV"

        # pkg-config: usually only on Linux/macOS (skip on Windows unless you know you need it)
        if [ "${{ runner.os }}" = "Linux" ] || [ "${{ runner.os }}" = "macOS" ]; then
          echo "PKG_CONFIG_PATH=$PREFIX/lib/pkgconfig:$PREFIX/share/pkgconfig${PKG_CONFIG_PATH:+:$PKG_CONFIG_PATH}" >> "$GITHUB_ENV"
        fi

        # Runtime loader for shared libs
        if [ "${{ runner.os }}" = "Linux" ]; then
          echo "LD_LIBRARY_PATH=$PREFIX/lib${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}" >> "$GITHUB_ENV"
        elif [ "${{ runner.os }}" = "macOS" ]; then
          echo "DYLD_LIBRARY_PATH=$PREFIX/lib${DYLD_LIBRARY_PATH:+:$DYLD_LIBRARY_PATH}" >> "$GITHUB_ENV"
        fi

